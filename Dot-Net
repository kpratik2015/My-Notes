## Dot Net Concepts

### Why dot net ?

Microsoft provides support.
Learning curve reduces due to one environment providing support for multiple tech.
Microsoft introduced disconnected arch. in dot net. That allows data to be copied on client, work on it and then send to server.
Dot Net introduced ASP.NET that allowed compilation instead of previously interpretation.

### COM
Component Object Model (or DLL): Helps reusability. Dot Net solved problem of DLL hell. The problem disallowed use of another app that would override another app's similar object.
COM was restricted to VB, C++. Memory management was also a pain. 
.NET introduced common object runtime i.e. an execution environment for components written in any language.
.NET allowed interoperability in web services.

### Architecture
Bottom to top:
OS																				-		Visual	
Common Language Runtime like JRE					-		Studio
Base Class Library												-		.NET
XML, ASP.NET, windows forms								
Common Language Specification : It allows a different langugae to provide standard for communicate with .NET							
C++, C#, VB (different langugaes of .NET) : Each language will have its own compiler. Below this the components remain same. 

Something to know about: https://www.mono-project.com/

### .NET Core Components

CLR provides an execution engine for managed applications

FCL

### Java v/s .NET

JAVA
- Intermediate lang. is bytecode
- Original design targeted interpretation
- Java VMs with JIT compilation are used

.NET
- Intermediate lang. is MSIL (MSIL is Common Language Specificaiton) [Microsoft Intermediate Language]
- Provides JIT compilation (removes overhead of interpretation

CLR understands CLS and not machine code.

### Common Language Runtime

CLR sits on top of OS to provide a virtual environment for hosting managed applications. Managed applications are those that require CLR.
CLR loads modules containing executable and executes their code.
Code might be managed or unmanaged. - In either case CLR determines what to do with it.
Managed code is written in pseudo machine language.

Physical copy of our code is in MSIL. On running the code, JIT compiler comes in picture and converts to native code.

### Language for .NET

C# since it has strict standards. Like case sensitive. 
Microsoft provides few languages like C++, Visual Basic, and C#. Other languages are from 3rd party.

.NET increases developer productivity by providing type safety, garbage collection and exceptions.


V2.0 and V4.0 are main versions. Since CLR verison changed. In V3.0 WPF, WCF and WF (Windows Workflow foundation) came.
Language Integrated Query (LINQ) came in V3.5

### Visual Studio 2015 Hands on with .NET
One solution in .NET can have multiple projects. E.g. Banking application is solution and then we can have bank website, desktop, etc.
Everything you do in .NET is a class. 

The things in 'using ...' do not have physical folders like java. They are namespace.
Namespace is a collection of namespaces and classes. E.g. Linq is a namespace inside System namespace.

Red color : method to echo back something
Blue color : keyword / class

Console.ReadLine(); will wait even if you start in debugging.

Use F10 to debug step by step.

On pressing F10, when reached function. If you press F11, then it will debug the function.

Breakpoint will execute code till that point and then start debugging.

### Basic Coding

string myname = "Pratik";
string greet = "Wassup?";
Console.WriteLine("Hello {0}! {1}", myname, greet);
Console.ReadLine();
string msg = string.Format("How is .NET {0}. And {1}", myname, greet);
Console.WriteLine(msg);

Developer command prompt inside visual studio tools. Type command: ildasm 
It's integrated language disassembler
Any compiled file is assembly.
mscorlib is MS file that has all namespaces stored.
.ctor is constructor in IL code.
S on icon denotes static.

### Memory

Data segment
Code segment
Heap
Stack : declared variables stored here.

Objects will always point to the heap.
E.g. 
object o;
int x = 20;
o = x; // object will create copy and point to heap
Console.WriteLine(o);	// 20
x = 30;	
Console.WriteLine(o);	// 20

In object we can store anything. It's called as boxing. A scalar value you can box in object.
Object is advantage to a certain extent as we can store any variable type in it. However, if we do for i 1..1000 o = x; It will create 1000 copies that will decrease performance.

Unboxing: reverse of boxing. int y = Convert.ToInt32(o);

Generics was then introduced to solve problems with object.

### Pass by reference 2 ways:

swap(ref a, ref b);
calc(a, b, out c, out d);
public static void calc(int p, int q, out int r, out int s)
{
    r = p + q;
    s = p * q;
}

public static void swap(ref int x, ref int y)
{
    x = y + -x + (y = x);
}

### Generics 

string name = "Pratik";
string city = "Pune";
NewSwap(ref name, ref city);
Console.WriteLine("name = {0}, city = {1}", name, city);
public static void NewSwap<T>(ref T x, ref T y)
{
  T z = x;
  x = y;
  y = z;
}


### Internal v/s public

internal class can be used inside assembly and not outside. 
assembly is the .exe/dll.
The internal access specifier hides its member variables and methods from other classes and objects, that is resides in other namespace. The variable or classes that are declared with internal can be access by any member within application. It is the default access specifiers for a class in C# programming.

### Getter and setter

public string Name
{
		get
		{
				return name;
		}

		set
		{
				name = value;
		}
}

string name;

To get this done automatically for a property. Right click on property name and click on Quick Action and refactoring.

Getters and Setters help us to perform checks or formatting or other things. This is why they are used.

Auto implementation: public string Name { get; set; }

### Constructor

public Employee()
{
		// Constructor
		Empno = 1234;
		Name = "Pratik";
		Dept = "IT";
		Salary = 66667;
}

// In void main:
// OLD: Employee emp1 = new Employee();
// NEW:
Employee emp2 = new Employee { Name="Bob", Empno = 4321 };

We can have a static constructor. It increments static variable whenever class instantiated.
Note: static method is for using static variables.

### To make a class not be a base class for some child class i.e. stop inhertiance. We use sealed keyword before class
